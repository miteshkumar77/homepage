{"version":3,"sources":["components/about.js","components/navbar.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","paper","height","width","control","paddingTop","spacing","title","alignSelf","justifyContent","About","classes","className","Typography","variant","align","component","menuButton","marginRight","toolbar","alignItems","paddingBottom","Navbar","AppBar","color","position","Toolbar","map","value","Button","key","Theme","createMuiTheme","palette","primary","blue","secondary","grey","backgroundColor","App","CssBaseline","Container","fixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAMMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,OAAQ,IACRC,MAAO,KAETC,QAAS,CACPC,WAAYP,EAAMQ,QAAQ,KAE5BC,MAAO,CACHP,SAAU,EACVQ,UAAW,SACXC,eAAgB,cAIT,SAASC,IAIpB,IAAMC,EAAUf,IAEhB,OACI,yBAAKgB,UAAWD,EAAQZ,MACpB,yBAAKa,UAAWD,EAAQP,SACpB,kBAACS,EAAA,EAAD,CAAYD,UAAWD,EAAQJ,MAAOO,QAAQ,KAAKC,MAAM,UAAzD,iBAKJ,yBAAKH,UAAWD,EAAQP,SACpB,kBAACS,EAAA,EAAD,CAAYC,QAAQ,KAAKE,UAAU,MAAnC,8EChChB,IAAMpB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACJC,SAAU,GAEZiB,WAAY,CACVC,YAAapB,EAAMQ,QAAQ,IAE7Ba,QAAS,CACPC,WAAY,cACZf,WAAYP,EAAMQ,QAAQ,GAC1Be,cAAevB,EAAMQ,QAAQ,QAIpB,SAASgB,IAGhB,IAAMX,EAAUf,IAChB,OACI,yBAAKgB,UAAWD,EAAQZ,MACpB,kBAACwB,EAAA,EAAD,CAAQC,MAAM,UAAUC,SAAS,UAC7B,kBAACC,EAAA,EAAD,CAASd,UAAWD,EAAQQ,SACvB,CAAC,QAAQ,YAAU,WAAY,YAAYQ,KAAI,SAACC,GAAD,OAC5C,kBAACC,EAAA,EAAD,CAAQL,MAAM,UAAUM,IAAKF,GAAQA,S,sEClBlDG,EARDC,YAAe,CAC3BC,QAAS,CACPC,QAASC,IACTC,UAAWC,IACXC,gBAAiBD,OCCfzC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,OAkBCuC,MAff,WACE,IAAM5B,EAAUf,IAChB,OACE,yBAAKgB,UAAWD,EAAQZ,MACtB,kBAAC,IAAD,CAAkBD,MAAOiC,GACvB,kBAACS,EAAA,EAAD,MACA,kBAAClB,EAAD,MACA,kBAACmB,EAAA,EAAD,CAAWC,OAAK,GACd,kBAAChC,EAAD,UCVUiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.90597f55.chunk.js","sourcesContent":["import React, { Component } from 'react'; \r\nimport ReactDOM from 'react-dom';\r\nimport { Toolbar, AppBar, Grid, Button, Container } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles'; \r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      height: 140,\r\n      width: 100,\r\n    },\r\n    control: {\r\n      paddingTop: theme.spacing(10),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        alignSelf: 'center',\r\n        justifyContent: 'center'\r\n    }\r\n  }));\r\n\r\nexport default function About() {\r\n\r\n    \r\n    \r\n    const classes = useStyles(); \r\n\r\n    return (\r\n        <div className={classes.root} >\r\n            <div className={classes.control}>\r\n                <Typography className={classes.title} variant=\"h1\" align='center'>\r\n                    Mitesh Kumar\r\n                </Typography>\r\n            </div>\r\n\r\n            <div className={classes.control}>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                Hi, I am a Computer Science Student at Rensselaer Polytechnic Institute. \r\n                </Typography>\r\n            </div>\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\n","import React, { Component } from 'react'; \r\nimport ReactDOM from 'react-dom';\r\nimport { Toolbar, AppBar, Grid, Button, Container } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles'; \r\nimport About from './about'; \r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    toolbar: {\r\n      alignItems: 'flex-center',\r\n      paddingTop: theme.spacing(1),\r\n      paddingBottom: theme.spacing(1),\r\n    }\r\n  }));\r\n\r\nexport default function Navbar() {\r\n    \r\n    \r\n        const classes = useStyles();\r\n        return (\r\n            <div className={classes.root}>\r\n                <AppBar color=\"primary\" position=\"sticky\">\r\n                    <Toolbar className={classes.toolbar}>\r\n                        {['About','ResumÃ©', 'Research', 'Projects'].map((value) => (\r\n                            <Button color=\"inherit\" key={value}>{value}</Button>\r\n                        ))}\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n        );\r\n    \r\n}\r\n\r\n\r\n","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport grey from '@material-ui/core/colors/grey'; \r\n\r\nconst Theme = createMuiTheme({\r\n  palette: {\r\n    primary: blue,\r\n    secondary: grey,\r\n    backgroundColor: grey\r\n  },\r\n});\r\n\r\nexport default Theme; ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Navbar from './components/navbar';\r\nimport About from './components/about'; \r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline'; \r\nimport { Container, MuiThemeProvider } from '@material-ui/core';\r\nimport Theme from './theme'; \r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  }\r\n}))\r\nfunction App() {\r\n  const classes = useStyles(); \r\n  return (\r\n    <div className={classes.root}>\r\n      <MuiThemeProvider theme={Theme}>\r\n        <CssBaseline/>\r\n        <Navbar/> \r\n        <Container fixed>\r\n          <About/>\r\n        </Container>\r\n      </MuiThemeProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}